plugins {
    id "java-library"
    id "maven-publish"
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
    id 'signing'
}

group = "io.github.thanh1912"
def versionSuffix = (System.env.CI == "true") ? "ci${System.env.GITHUB_RUN_NUMBER ?: ''}" : "local"
version = "0.0.1-$versionSuffix"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
allprojects {
    group = "io.github.thanh1912"
    version = "1.0"

    repositories {
        mavenCentral()
    }
}
java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = "htp1912"
            password = "G9rYZpge3Sa@iB"
        }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'project'
                description = 'testing in gradle-nexus-publish-plugin'
                url = 'https://github.com/Thanh1912/arithmetic'
                inceptionYear = '2020'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "Thanh Phu"
                        name = 'Thanh Phu'
                        email = 'htp1912@gmail.com'
                    }

                }
                scm {
                    connection = 'scm:https://github.com/Thanh1912/arithmetic.git'
                    developerConnection = 'scm:git@github.com/Thanh1912/arithmetic.git'
                    url = 'https://github.com/Thanh1912/arithmetic'
                }
            }
        }
    }
}


signing {
    required { !project.version.endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
    if (project.findProperty("signingKey")) {
        useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
    } else {
        useGpgCmd()
    }
    sign publishing.publications.mavenJava
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
